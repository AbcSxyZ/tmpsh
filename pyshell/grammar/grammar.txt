# definition shell grammar

STMT:
	STMT
	QUOTES

CMD:
	TERMINATOR
	STMT
	SUB_PROCESS
	CMD BACKGROUND_JOBS
	REDIRECTION CMD
	CMD_BINAIRE
	COMMAND_SH
	ASSIGNATION
	CMD CMD

ESCAPE:
	\

ASSIGNATION:
	CMD ASSIGNATION_EQUAL
	CMD CONCATENATION

ASSIGNATION_EQUAL:
	=

CONCATENATION:
	+=

BACKGROUND_JOBS
	&

TERMINATOR:
	END_COMMAND
	NEW_LINE

END_COMMAND:
	;

SELECTER_END:
	;;

# Must be hardcode...
# NEW_LINE:
# 	\n

CMD_BINAIRE:
	CMD PIPE CMD
	CMD CMDAND CMD
	CMD CMDOR CMD

PIPE:
	|

CMDAND:
	&&

CMDOR:
	||

REDIRECTION:
	APPEND
	TRUNC
	HEREDOC
	READ_FROM
	TRUNC_TO_FD
	READ_FROM_FD

APPEND:
	>>

TRUNC:
	>

HEREDOC:
	<<

READ_FROM:
	<

TRUNC_TO_FD:
	>&

READ_FROM_FD:
	<&

# CMD_SH:
#	COMMAND_SH END_COMMAND
#	COMMAND_SH BACKGROUND_JOBS
#	COMMAND_SH PIPE

COMMAND_SH:
	SUBSH CMD END_BRACKET
	CURSH CMD END_BRACE
#	CURSH END_BRACE
#	SUBSH END_BRACKET



SUB_PROCESS:
	BRACEPARAM CMD END_BRACE
	CMDSUBST1 CMD END_BRACKET
	CMDSUBST2 CMD END_BRACKET
	CMDSUBST3 CMD END_BRACKET
	BRACEPARAM END_BRACE
	CMDSUBST1 END_BRACKET
#	CMDSUBST2 END_BRACKET
#	CMDSUBST3 END_BRACKET


BRACEPARAM: # FILE_SUBSTITUTION
	${

CMDSUBST1: # STDIN_SUBSTITUTION
	$(

CURSH: # GROUP_COMMAND
	{

SUBSH: # SUBSHELL_BLOCK
	(

CMDSUBST2: # COMMAND_SUBSTITUTION
	>(

CMDSUBST3: # VARIABLE_EXPANSION
	<(

END_BRACKET:
	)

END_BRACE:
	}

QUOTES:
	DQUOTES CMD END_DQUOTES
	QUOTE CMD END_QUOTE
	QUOTE END_QUOTE
	DQUOTES END_DQUOTES

DQUOTES:
	"

QUOTE:
	'

FORBIDDEN:
	TRUNC CMDSUBST3
	COMMAND_SH STMT
