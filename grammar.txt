# definition shell grammar

STMT:
	QUOTES
	VAR

VAR:
	$$
	$#
	$*
	$@
	$?
	$!


CMD:
	TERMINATOR
	STMT
	SUB_PROCESS
	CMD BACKGROUND_JOBS
	REDIRECTION CMD
	CMD_BINAIRE
	ASSIGNATION
	CMD CMD
	COMMAND_SH

ESCAPE:
	\

ASSIGNATION:
	CMD ASSIGNATION_SYMBOL

ASSIGNATION_SYMBOL:
	ASSIGNATION_EQUAL
	CONCATENATION

ASSIGNATION_EQUAL:
	=

CONCATENATION:
	+=

BACKGROUND_JOBS
	&

TERMINATOR:
	END_COMMAND
	NEW_LINE

END_COMMAND:
	;

SELECTER_END:
	;;

# Must be hardcode...
# NEW_LINE:
# 	\n

CMD_BINAIRE:
	CMD BINARY CMD

BINARY:
	PIPE
	CMDAND
	CMDOR

PIPE:
	|

CMDAND:
	&&

CMDOR:
	||

REDIRECTION:
	APPEND
	TRUNC
	HEREDOC
	READ_FROM
	TRUNC_TO_FD
	READ_FROM_FD
#	TRIPLEHEREDOC
#	HEREDOCMINUS

APPEND:
	>>

TRUNC:
	>

HEREDOC:
	<<

TRIPLEHEREDOC:
	<<<

HEREDOCMINUS:
	<<-


READ_FROM:
	<

TRUNC_TO_FD:
	>&

READ_FROM_FD:
	<&

COMMAND_SH:
	SUBSH CMD END_BRACKET
	CURSH CMD END_BRACE

SUB_PROCESS:
	BRACEPARAM CMD END_BRACE
	CMDSUBST1 CMD END_BRACKET
	CMDSUBST2 CMD END_BRACKET
	CMDSUBST3 CMD END_BRACKET
	CMDSUBST1 END_BRACKET
#	BRACEPARAM END_BRACE
#	CMDSUBST2 END_BRACKET
#	CMDSUBST3 END_BRACKET
# 	TEST CMD END_TEST

BRACEPARAM: # FILE_SUBSTITUTION
	${

CMDSUBST1: # STDIN_SUBSTITUTION
	$(

CURSH: # GROUP_COMMAND
	{

SUBSH: # SUBSHELL_BLOCK
	(

CMDSUBST2: # COMMAND_SUBSTITUTION
	>(

CMDSUBST3: # VARIABLE_EXPANSION
	<(

END_BRACKET:
	)

END_BRACE:
	}

#TEST:
#	[

#END_TEST:
#	]


QUOTES:
	DQUOTES CMD END_DQUOTES
	QUOTE CMD END_QUOTE
	QUOTE END_QUOTE
	DQUOTES END_DQUOTES

DQUOTES:
	"

QUOTE:
	'

FORBIDDEN:
	 TRUNC CMDSUBST3
	 READ_FROM CMDSUBST2
	 VAR ASSIGNATION_EQUAL
	 VAR CONCATENATION
	 HEREDOCMINUS
	 SELECTER_END
	 BINARY END_COMMAND
	 END_COMMAND PIPE
	 END_COMMAND CMDOR
	 END_COMMAND CMDAND
	 BACKGROUND_JOBS PIPE
	 BACKGROUND_JOBS CMDOR
	 BACKGROUND_JOBS CMDAND
	 BINARY BACKGROUND_JOBS
	 TRIPLEHEREDOC
